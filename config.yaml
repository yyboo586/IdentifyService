server:
  address: "0.0.0.0:9500"
  routeOverWrite: true
  openapiPath: "/api.json"
  swaggerPath: "/swagger"

casbin:
  modelFile: "./resource/casbin/rbac_model.conf"
  policyFile: "./resource/casbin/rbac_policy.csv"

logger:
  level: "all"
  stdout: true   
  timeFormat: "2006-01-02 15:04:05"
  path: "./resource/log/server"  # 日志文件存储目录路径，建议使用绝对路径。默认为空，表示关闭
  file: "{Y-m-d}.log"    
  logStdout: true               # 日志是否输出到终端。默认为true
  errorStack: true               # 当Server捕获到异常时是否记录堆栈信息到日志中。默认为true
  errorLogEnabled: true               # 是否记录异常日志信息到日志中。默认为true
  errorLogPattern: "error-{Ymd}.log"  # 异常错误日志文件格式。默认为"error-{Ymd}.log"
  accessLogEnabled: true              # 是否记录访问日志。默认为false
  accessLogPattern: "access-{Ymd}.log" # 访问日志文件格式。默认为"access-{Ymd}.log"  

database:
  logger:
    level:   "all"
    stdout:  true
    Path: "resource/log/sql"

  default:
    link: "mysql:root:12345678@tcp(127.0.0.1:3306)/identify_service?charset=utf8mb4&parseTime=true&loc=Local"
    debug:  true
    charset: "utf8mb4" #数据库编码
    dryRun: false #空跑
    maxIdle: 10 #连接池最大闲置的连接数
    maxOpen: 10 #连接池最大打开的连接数
    maxLifetime: "30s" #(单位秒)连接对象可重复使用的时间长度

gfToken:
  cacheKey: "gfToken:"
  timeOut: 108000
  maxRefresh: 54000
  multiLogin: true
  encryptKey: "49c54195e750b04e74a8429b17896586"
  cacheModel: "dist"  #缓存模式 memory OR redis OR dist
  distPath: "./resource/data/distTokenDb" #使用磁盘缓存时配置数据缓存的目录
  excludePaths:
    - "/api/v1/identify-service/token/introspect"
    - "/api/v1/identify-service/user/register"

# 消息队列
mq:
  type: "nsq"
  topics:
    - "core.device.online"
    - "core.device.offline"
    - "core.device.alarm"
  nsq:
    addr: "124.220.236.38:4150"
    lookupdAddr: "124.220.236.38:4160"

# Redis 配置示例
redis:
  # 单实例配置
  default:
    address: 127.0.0.1:6379
    db: 1
    idleTimeout: "60s" #连接最大空闲时间，使用时间字符串例如30s/1m/1d
    maxConnLifetime: "90s" #连接最长存活时间，使用时间字符串例如30s/1m/1d
    waitTimeout: "60s" #等待连接池连接的超时时间，使用时间字符串例如30s/1m/1d
    dialTimeout: "30s" #TCP连接的超时时间，使用时间字符串例如30s/1m/1d
    readTimeout: "30s" #TCP的Read操作超时时间，使用时间字符串例如30s/1m/1d
    writeTimeout: "30s" #TCP的Write操作超时时间，使用时间字符串例如30s/1m/1d
    maxActive: 100
    
